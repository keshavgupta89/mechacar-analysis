print(student)
print(sample(33:66, 3))
}
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
print(student)
print(sample(33, 3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
sec_letter <- str_sub(student, 2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (sec_letter == "e"){
print(student)
print(sample(33:66, 3))
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
sec_letter <- substring(student, 2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (sec_letter == "e"){
print(student)
print(sample(33:66, 3))
}
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
print(student)
print(sample(33, 3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
sec_letter <- substring(student, 2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (sec_letter == "e"){
print(student)
print(sample(33:66, 3))
}
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
sec_letter <- substring(student, 2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (sec_letter == "e"){
print(student)
print(sample(33:66, 3))
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
sec_letter <- substring(student, 2)
print(student)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (sec_letter == "e"){
print(student)
print(sample(33:66, 3))
}
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
sec_letter <- substring(student, 2)
print(student)
print(sec_letter)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (sec_letter == "e"){
print(student)
print(sample(33:66, 3))
}
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
sec_letter <- substring(student, 2, 2)
# print(student)
# print(sec_letter)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (sec_letter == "e"){
print(student)
print(sample(33:66, 3))
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Call the function with the student vector as an argument.
roll_call(students)
# Call the function with the student vector as an argument.
locker_combinations(students)
sec_letter <- substring(student, 2)
print(sec_letter)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
sec_letter <- substring(student, 2, 2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (sec_letter == "e"){
print(student)
print(sample(33:66, 3))
}
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("students.csv")
students <- read_csv("../Resources/students.csv")
head(students)
# unique(dataset, variable) displays unique elements from that column
# unique(dataset, variable) displays unique elements from that column
unique(students, school_name)
# unique(dataset, variable) displays unique elements from that column
unique(students, "school_name")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
nrow(diamonds)
head(diamonds, 10)
slice(diamonds, 1:7)
select(diamonds, carat, price)
# unique(dataset, variable) displays unique elements from that column
unique(students)
# unique(dataset, variable) displays unique elements from that column
unique(students$school_name)
# Use length() to identify the number of schools
length(unique(students$school_name))
# nrow() returns the number of rows
student_count <- nrow(students)
paste("There are a total of", student_count, "students.")
mean_reading_score <- mean(students, reading_score)
paste("The average reading score is", mean_reading_score)
paste("The average math score is", mean_math_score)
mean_reading_score <- mean(students$reading_score)
mean_math_score <- mean(students$math_score)
paste("The average reading score is", mean_reading_score)
paste("The average math score is", mean_math_score)
percentage_passing_reading <- mean(students$reading_score >= 70)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
percentage_passing_math <- mean(students$math_score >= 70)
paste(percentage_passing_math, "% of the students have passing math scores.")
percentage_passing_math <- round(mean(students$math_score >= 70)*100, 2)
paste(percentage_passing_math, "% of the students have passing math scores.")
percentage_passing_reading <- round(mean(students$reading_score >= 70)*100, 2)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
percentage_passing_overall <- round(mean(students$reading_score & students$math_score >= 70)*100, 2)
paste(percentage_passing_overall, "% of the students have passing math and reading scores.")
percentage_passing_overall <- round(mean(students$reading_score && students$math_score >= 70)*100, 2)
paste(percentage_passing_overall, "% of the students have passing math and reading scores.")
percentage_passing_overall <- round(mean(students$reading_score >= 70 & students$math_score >= 70)*100, 2)
paste(percentage_passing_overall, "% of the students have passing math and reading scores.")
by_school <- group_by(students, school_name)
round(mean(by_school$reading_score >= 70 & by_school$math_score >= 70)*100, 2)
by_school <- group_by(students, school_name)
by_school
by_school <- group_by(students, school_name)
summarize(school_name, mean(reading_score), sum(math_score))
by_school <- group_by(students, school_name)
summarize(school_name, mean(reading_score), mean(math_score))
by_school <- group_by(students, school_name)
summarize(by_school, mean(reading_score), mean(math_score))
by_grade <- group_by(students, grade)
summarize(by_grade, mean(reading_score), mean(math_score))
by_grade <- group_by(by_school, grade)
summarize(by_grade, mean(reading_score), mean(math_score))
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
sardines
sardines <- read.csv(file="../Resources/sardines.csv")
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
sardines
sardines <- read.csv(file="../Resources/sardines.csv")
sardines <- read.csv("../Resources/sardines.csv")
setwd("D:/Bootcamp/Module15 - R + Statistics/2")
sardines <- read.csv(file="../Resources/sardines.csv")
setwd("D:/Bootcamp/Module15 - R + Statistics/2/Activities/03-Stu_Sardines/Unsolved")
sardines <- read.csv(file="../Resources/sardines.csv")
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
sardines
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
sardines_alaska <- subset(sardines, sardines[location]==1)
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
sardines_alaska <- subset(sardines, location==1)
sardines_alaska
mean(sardines_alaska[vertebrae])
mean(sardines_alaska$vertebrae)
# Calculate the population mean for Sardine Vertebrae in San Diego.
# Hint: use the subset() function to get only the data for San Diego.
sardines_sn <- subset(sardines, location==2)
sardines_sn
mean(sardines_sn$vertebrae)
mean(sardines_al$vertebrae)
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
sardines_al <- subset(sardines, location==1)
sardines_al
mean(sardines_al$vertebrae)
mean(sardines_sn$vertebrae)
s_al_mean <- mean(sardines_al$vertebrae)
s_sn_mean <- mean(sardines_sn$vertebrae)
# Calculate Independent (Two Sample) T-Test
t.test(s_al_mean, s_sn_mean)
# Calculate Independent (Two Sample) T-Test
t.test(s_sn_mean, s_al_mean)
# Calculate Independent (Two Sample) T-Test
t.test(s_al_mean$vertebrae, sardines_sn$vertebrae)
# Calculate Independent (Two Sample) T-Test
t.test(sardines_al$vertebrae, sardines_sn$vertebrae)
t.test(sardines_al$vertebrae, sardines$vertebrae)
t.test(sardines_sn$vertebrae, sardines$vertebrae)
# Generate some fake data to test with
set.seed(42)
population1 = rnorm(1000)
population2 = rnorm(1000)
t.test(population1, population2)
population1 = rnorm(1000)
population2 = rnorm(1000, -2)
t.test(population1, population2)
population1 = rnorm(1000)
population2 = rnorm(1000, -2)
t.test(population1, population2)
set.seed(42)
population1 = rnorm(1000)
population2 = sample(population1, 200)
t.test(population2, mu=mean(population1))
# Generate data with a bigger difference in means
population3 = rnorm(1000, -2)
t.test(population2, mu=mean(population3))
t.test(sardines_al$vertebrae, s_sn_mean)
t.test(sardines_al$vertebrae, mu=s_sn_mean)
# Calculate Independent (Two Sample) T-Test
t.test(sardines_al$vertebrae, sardines_sn$vertebrae)
sardines_sn <- subset(sardines, location==6)
mean(sardines_sn$vertebrae)
# Calculate Independent (Two Sample) T-Test
t.test(sardines_al$vertebrae, sardines_sn$vertebrae)
sardines_al <- subset(sardines, location==1)
mean(sardines_al$vertebrae)
sardines_al <- subset(sardines, location==1)
mean(sardines_al$vertebrae)
sardines <- read.csv(file="../Resources/sardines.csv")
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
sardines_al <- subset(sardines, location==1)
mean(sardines_al$vertebrae)
# Calculate the population mean for Sardine Vertebrae in San Diego.
# Hint: use the subset() function to get only the data for San Diego.
sardines_sn <- subset(sardines, location==6)
mean(sardines_sn$vertebrae)
# Calculate Independent (Two Sample) T-Test
t.test(sardines_al$vertebrae, sardines_sn$vertebrae)
t.test(sardines_al$vertebrae, mu=51)
t.test(sardines_al$vertebrae, mu=mean(sardines_sn$vertebrae))
# Calculate Independent (Two Sample) T-Test
t.test(sardines_al$vertebrae, sardines_sn$vertebrae)
setwd("D:/Bootcamp/Module15 - R + Statistics/2/Activities/05-Stu_ANOVA/Unsolved")
# Calculate Independent (Two Sample) T-Test
t.test(sardines_al[["vertebrae"]], sardines_sn[["vertebrae"]])
#  Plot the data using ggplot
hair
# Read in the CSV file.
hair <- read.csv(file="../Resources/hair.csv")
#  Plot the data using ggplot
hair
library(tidyverse)
mosquito <- read.csv(file="04-Ins_ANOVA/Resources/mosquito.csv")
ggplot(mosquito,aes(x=factor(treatment),y=mosq)) + geom_boxplot()
# aov performs the analysis of variance, but does not provide a p-value
aov(mosq ~ factor(treatment), data=mosquito)
# to obtain a p-value, wrap aov() with a summary() function
summary(aov(mosq ~ factor(treatment), data=mosquito))
setwd("D:/Bootcamp/Module15 - R + Statistics/2/Activities/04-Ins_ANOVA/Solved")
library(tidyverse)
mosquito <- read.csv(file="04-Ins_ANOVA/Resources/mosquito.csv")
ggplot(mosquito,aes(x=factor(treatment),y=mosq)) + geom_boxplot()
# aov performs the analysis of variance, but does not provide a p-value
aov(mosq ~ factor(treatment), data=mosquito)
# to obtain a p-value, wrap aov() with a summary() function
summary(aov(mosq ~ factor(treatment), data=mosquito))
library(tidyverse)
mosquito <- read.csv(file="../Resources/mosquito.csv")
ggplot(mosquito,aes(x=factor(treatment),y=mosq)) + geom_boxplot()
# aov performs the analysis of variance, but does not provide a p-value
aov(mosq ~ factor(treatment), data=mosquito)
# to obtain a p-value, wrap aov() with a summary() function
summary(aov(mosq ~ factor(treatment), data=mosquito))
mosquito
setwd("D:/Bootcamp/Module15 - R + Statistics/2/Activities/05-Stu_ANOVA/Unsolved")
#  Plot the data using ggplot
hair
ggplot(hair,aes(x=factor(HairColour),y=Pain)) + geom_boxplot()
aov(Pain ~ factor(HairColour), data=hair)
# Determine the p-value using ANOVA
summary(aov(Pain ~ factor(HairColour), data=hair))
# to obtain a p-value, wrap aov() with a summary() function
summary(aov(mosq ~ factor(treatment), data=mosquito))
# Determine the p-value using ANOVA
summary(aov(Pain ~ factor(HairColour), data=hair))
# Determine the p-value using ANOVA
str(summary(aov(Pain ~ factor(HairColour), data=hair)))
# Determine the p-value using ANOVA
str(summary(aov(Pain ~ factor(HairColour), data=hair)))[1,5]
# Determine the p-value using ANOVA
str(summary(aov(Pain ~ factor(HairColour), data=hair)))[5]
# Determine the p-value using ANOVA
str(summary(aov(Pain ~ factor(HairColour), data=hair)[1,5]))
# Determine the p-value using ANOVA
str(summary(aov(Pain ~ factor(HairColour), data=hair)[5]))
setwd("D:/Bootcamp/Module15 - R + Statistics/2/Activities/06-Evr_Fits_and_Regression/Unsolved")
# Read in the diabetes.csv file.
diabetes <- read.csv(file="../Resources/diabetes.csv")
# Plot a scatter plot of bp vs. one year disease progression
diabetes
# Plot a scatter plot of bp vs. one year disease progression
diabetes[1]
# Plot a scatter plot of bp vs. one year disease progression
diabetes
# Plot a scatter plot of bp vs. one year disease progression
ggplot(diabetes, aes(bp, One_Year_Disease_Progress)) + geom_point + geo_smooth(method = "lm", se=F)
install.packages("ggplot")
# Plot a scatter plot of bp vs. one year disease progression
ggplot(diabetes, aes(bp, One_Year_Disease_Progress)) + geom_point + geo_smooth(method = "lm", se=F)
summary(reg)
# Perform linear regression
reg <- ln(One_Year_Disease_Progress ~ bp, data=diabetes)
# Perform linear regression
reg <- ln(One_Year_Disease_Progress ~ bp, data=diabetes)
# Read in the diabetes.csv file.
diabetes <- read.csv(file="../Resources/diabetes.csv")
# Perform linear regression
reg <- ln(One_Year_Disease_Progress ~ bp, data=diabetes)
# Perform linear regression
reg <- ln(One_Year_Disease_Progress ~ bp, data=diabetes)
# Perform linear regression
reg <- lm(One_Year_Disease_Progress ~ bp, data=diabetes)
summary(reg)
# Get the r-sqaured value.
summary(reg)$r.squared
# Determine the p-value using ANOVA
str(summary(aov(Pain ~ factor(HairColour), data=hair)))
setwd("D:/Bootcamp/git clones/mechacar-statistical-analysis")
library(dplyr)
mechacar <- read.csv("../Resources/MechaCar_mpg.csv")
mechacar <- read.csv("Resources/MechaCar_mpg.csv")
mechacar
reg <- lm(mpg ~,  data=mechacar)
reg <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,  data=mechacar)
summary(reg)
summary(reg)$fstatistics
summary(reg)$coefficients
summary(reg)$coefficients[,4]
summary(reg)
summary(reg)$r.squared
names(summary(reg))$r.squared
names(summary(reg)$r.squared)
names(summary(reg))
suspension_coil <- read.csv("Resources/Suspension_Coil.csv")
total_summary <- summarize(suspension_coil)
total_summary
summarize(suspension_coil)
suspension_coil
summarize(mean(suspension_coil, na.rm=T))
summarize(total_summary)
head(suspension_coil)
head(total_summary)
summarize(suspension_coil, mean(PSI))
summarize(suspension_coil, mean(PSI), median(PSI), variance(PSI), sd(PSI))
names(summarize)
names(summarize(suspension_coil))
summarize(suspension_coil, mean(PSI), median(PSI), var(PSI), sd(PSI))
summarize(suspension_coil, Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
total_summary <- summarize(suspension_coil, Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
total_summary
lot_summary <- group_by(total_summary, Manufacturing_Lot, .add=T)
lot_summary <- group_by(suspension_coil, Manufacturing_Lot, .add=T)
lot_summary
lot_summary <- group_by(suspension_coil, Manufacturing_Lot)
lot_summary
lot_summary <- summarize_at(group_by(suspension_coil, Manufacturing_Lot))
lot_summary <- summarize_at(group_by(suspension_coil, Manufacturing_Lot), vars(PSI))
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot)
lot_summary
group_by(suspension_coil, Manufacturing_Lot)
suspension_coil %>% group_by(Manufacturing_Lot)
suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI))
suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI)))
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>%  summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
lot_summary
total_summary
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>%  summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI)) %>% round(2)
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>%  summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI)) %>% round(2)
suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))) %>% round(2)
lot_summary <- round(summaraize(group_by(suspension_coil, Manufacturing_Lot), Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), 2))
lot_summary <- round(summaraize(group_by(suspension_coil, Manufacturing_Lot), Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), 2)
lot_summary
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>%  round(summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), 2)
lot_summary
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>%  summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI)
lot_summary
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>%  summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
lot_summary
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>%  summarize(Mean=round(mean(PSI),2), Median=round(median(PSI),2), Variance=round(var(PSI),2), SD=round(sd(PSI),2))
lot_summary
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>%  summarize(Mean=round(mean(PSI),2), Median=round(median(PSI),2), Variance=round(var(PSI),2), SD=round(sd(PSI),2))
lot_summary
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>%  summarize(Mean=round(mean(PSI),2), Median=round(median(PSI),2), Variance=round(var(PSI),2), SD=round(sd(PSI),2)) %>% as.data.frame()
lot_summary
total_summary
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>%  summarize(Mean=round(mean(PSI),2), Median=round(median(PSI),2), Variance=round(var(PSI),7), SD=round(sd(PSI),7)) %>% as.data.frame()
lot_summary
kable(lot_summary)
library(lemon)
gt(lot_summary)
summary(reg)
summary(reg)$r.squared
total_summary
lot_summary
View(total_summary)
View(lot_summary)
t.test(suspension_coil$PSI, 1500)
t.test(suspension_coil$PSI, mu=1500)
lot1 <- subset(suspension_coil, Manufacturing_Lot==1)
lot1
suspension_coil
lot1 <- subset(suspension_coil, Manufacturing_Lot=="Lot1")
lot1
lot2 <- subset(suspension_coil, Manufacturing_Lot=="Lot2")
lot3 <- subset(suspension_coil, Manufacturing_Lot=="Lot3")
t.test(lot1$PSI, mu=1500)
t.test(lot2$PSI, mu=1500)
t.test(lot3$PSI, mu=1500)
View(lot1)
View(lot2)
View(lot3)
library(dplyr)
mechacar <- read.csv("Resources/MechaCar_mpg.csv")
reg <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,  data=mechacar)
summary(reg)
summary(reg)$r.squared
suspension_coil <- read.csv("Resources/Suspension_Coil.csv")
total_summary <- summarize(suspension_coil, Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
total_summary
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>%  summarize(Mean=round(mean(PSI),2), Median=round(median(PSI),2), Variance=round(var(PSI),7), SD=round(sd(PSI),7)) %>% as.data.frame()
lot_summary
t.test(suspension_coil$PSI, mu=1500)
lot1 <- subset(suspension_coil, Manufacturing_Lot=="Lot1")
lot2 <- subset(suspension_coil, Manufacturing_Lot=="Lot2")
lot3 <- subset(suspension_coil, Manufacturing_Lot=="Lot3")
t.test(lot1$PSI, mu=1500)
t.test(lot2$PSI, mu=1500)
t.test(lot3$PSI, mu=1500)
summary(reg)
summary(reg2)
reg2 <- lm(mpg ~ vehicle_length + vehicle_weight + ground_clearance,  data=mechacar)
summary(reg2)
summary(reg)$r.squared
summary(reg)
reg2 <- lm(mpg ~ vehicle_length + ground_clearance,  data=mechacar)
summary(reg2)
View(mechacar)
View(lot_summary)
View(total_summary)
t.test(lot1$PSI, mu=1500)
t.test(suspension_coil$PSI, mu=1500)
t.test(lot1$PSI, mu=1500)
t.test(lot1$PSI, lot2$PSI)
t.test(lot2$PSI, mu=1500)
t.test(lot3$PSI, mu=1500)
